1005 继续(3n+1)猜想 (25分)
==============================

卡拉兹(Callatz)猜想已经在1001中给出了描述。在这个题目里，情况稍微有些复杂。

当我们验证卡拉兹猜想的时候，为了避免重复计算，可以记录下递推过程中遇到的每一个数。例如对 n=3 进行验证的时候，我们需要计算 3、5、8、4、2、1，则当我们对 n=5、8、4、2 进行验证的时候，就可以直接判定卡拉兹猜想的真伪，而不需要重复计算，因为这 4 个数已经在验证3的时候遇到过了，我们称 5、8、4、2 是被 3“覆盖”的数。我们称一个数列中的某个数 n 为“关键数”，如果 n 不能被数列中的其他数字所覆盖。

现在给定一系列待验证的数字，我们只需要验证其中的几个关键数，就可以不必再重复验证余下的数字。你的任务就是找出这些关键数字，并按从大到小的顺序输出它们。

**输入格式：**

每个测试输入包含 1 个测试用例，第 1 行给出一个正整数 K (<100)，第 2 行给出 K 个互不相同的待验证的正整数 n (1<n≤100)的值，数字间用空格隔开。

**输出格式：**

每个测试用例的输出占一行，按从大到小的顺序输出关键数字。数字间用 1 个空格隔开，但一行中最后一个数字后没有空格。

**输入样例**::

  6
  3 5 6 7 8 11

**输出样例**::

  7 6

**解析**

- 读入所有数据
- 验证卡拉兹猜想，在所有数据中删除过程数
- 顺序输出剩下的数据

**C**

*方法一*

.. code-block:: c
   :linenos:

   #include<stdio.h>
   #include<stdlib.h>

   #define N 100

   int compare_number(const void *a, const void *b)
   {
           return *(int *)b - *(int *)a;
   }
   int main(void)
   {
           int n = 0, j = 0;
           int seq[N] = {0};
           int temp = 0;

           scanf("%d", &n);
           for (int i = 0; i < n; ++i)
           	scanf("%d", &seq[i]);

           for (int i = 0; i < n; ++i) {
                   if (seq[i]) {
                           temp = seq[i];
                           while (temp != 1) {
                                   temp = temp % 2 ? (temp * 3 + 1) / 2 : temp / 2;
                                   for (int i = 0; i < n; ++i)
                                           if (temp == seq[i])
                                                   seq[i] = 0;
                           }
                   }
           }
           qsort(seq, n, sizeof(int), compare_number);

           if (seq[0])
                   printf("%d", seq[0]);
           while (seq[++j] != 0)
                   printf(" %d", seq[j]);

           return 0;
   }

*方法二*

.. code-block::
   :linenos:

   #include<stdio.h>

   #define K 100

   int main(void)
   {
           int k, n, a[K], ans[K + 1] = {0};

           scanf("%d", &k);
           for (int i = 0; i < k; ++i) {
                   scanf("%d", &a[i]);
                   ans[a[i]] = 1;
           }

           for (int i = 0; i < k; ++i) {
                   n = a[i];
                   while ( n != 1) {
                           n = n % 2 ? ( n * 3 + 1) / 2 : n / 2;
                           if (n <= 100)
                                   ans[n] = 0;
                   }
           }

           int first = 1;
           for (int i = 0; i <= 100; ++i) {
                   if (ans[100 - i]) {
                           if (!first)
                                   putchar(' ');
                           printf("%d", 100 - i);
                           first = 0;
                   }
           }

           return 0;
   }

**C++**

.. code-block:: c++
   :linenos:

   #include<iostream>
   #include<vector>
   #include<set>

   using namespace std;

   int main(void)
   {
       int k, n;
       vector<int> v;
       cin >> k;
       for (int i = 0; i != k; ++i) {
           cin >> n;
           v.push_back(n);
       }

       set<int> ans(v.cbegin(), v.cend());
       for (auto c : v) {
           while (c != 1) {
               c = c % 2 ? (c * 3 + 1) / 2 : c / 2;
               ans.erase(c);
           }
       }

       for (auto it = ans.crbegin(); it != ans.crend(); ++it) {
           if (it != ans.crbegin())
               cout << ' ';
           cout << *it;
       }
       cout << endl;

       return 0;
   }
